@page "/"
@using Models.ViewModels.Api
@using Refit
@using UI.Interfaces
@using Models
@inject IGoalApi GoalApi
@inject ILogger<IGoalApi> Logger

<PageTitle>Gaol-Keeping</PageTitle>

<h1> Welcome to gaol keeping website </h1>

<AuthorizeView>
    <Authorized Context="goalIndex">
        <EditForm Model="@_model" OnValidSubmit="@(HandleUpdateTodayGoal)">
            <DataAnnotationsValidator/>

            @foreach (var ((existing, goal), index) in _goals.Zip(Enumerable.Range(0, _goals.Count)))
            {
                <HxInputText Label="@($"Goal #{index + 1}")" @bind-Value="@(goal.Text)" Placeholder="@($"Enter goal #{index + 1} text here.")" Hint="Hint: enter short, precise description what you want to do today">
                    <InputGroupEndTemplate>
                        <HxButton Color="ThemeColor.Danger" OnClick="@(() => DeleteGoal(goal))">Delete</HxButton>
                    </InputGroupEndTemplate>
                </HxInputText>
            }


            <div class="container text-center">
                <div class="row justify-content-end">
                    <div class="col-4">
                        <HxButton Color="ThemeColor.Secondary" OnClick="@(AddGoal)" Enabled="@(_goals.Count < 3)">New Goal</HxButton>
                    </div>
                    <div class="col-4">
                        <HxSubmit Color="ThemeColor.Primary" Enabled="@(_goals.Count > 0)">Save</HxSubmit>
                    </div>
                </div>
            </div>

        </EditForm>


        @*<HxGrid TItem="Goal" Responsive="true" DataProvider="GetGridData" PageSize="10">
        	<Columns>
        		<HxGridColumn TItem="Goal" HeaderText="Display Name" ItemTextSelector="@(item => item.AddedDate)" IsDefaultSortColumn="true" />
        		<HxGridColumn TItem="Goal" HeaderText="Name" ItemTextSelector="@(item => item.Name)" SortString="@nameof(CultureInfo.Name)" />
        	</Columns>
        </HxGrid>*@

    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private GoalViewModel _model = new();

    private List<(bool existing, Goal goal)> _goals = new();

    private void AddGoal()
    {
        _goals.Add((false, new Goal
        {
            AddedDate = DateTimeOffset.Now.Date
        }));
    }

    private async Task DeleteGoal(Goal goal)
    {
        var t = _goals.Find(x => x.goal == goal);

        if (t.existing)
        {
            await GoalApi.Delete(t.goal.Id);
        }
        else
        {
            _goals.Remove(t);
        }
    }

    private async Task UpdateGoal(Goal goal)
    {
        var t = _goals.Find(x => x.goal == goal);

        if (t.existing)
        {
            await GoalApi.Update(t.goal.Id, t.goal);
        }
        else
        {
            await GoalApi.Save(t.goal);
        }
    }

    public async Task HandleUpdateTodayGoal()
    {
        try
        {
            await Task.WhenAll(_goals.Select(x => x.goal).Select(UpdateGoal).ToArray());
        }
        catch (ApiException e)
        {
            Logger.LogError(e, "Failed to update today goal");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var userIdentity = (await authenticationStateTask).User.Identity;
        if (userIdentity is {IsAuthenticated: false })
        {
            return;
        }

        _goals = (await GoalApi.GetTodayGaols()).Select(x => (true, x)).ToList();
    }

}